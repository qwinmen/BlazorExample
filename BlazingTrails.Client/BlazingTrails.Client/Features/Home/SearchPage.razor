@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"
@inject HttpClient Http

<PageTitle>Search Trails - Blazing Trails</PageTitle>
<nav aria-label="breadcrumb">
	<ol class="breadcrumb">
		<li class="breadcrumb-item">
			<a href="/">Home</a>
		</li>
		<li class="breadcrumb-item active" aria-current="page">Search</li>
	</ol>
</nav>

<h3 class="mt-5 mb-4">Результаты поиска: "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm"/>
@if (_searchResults == null)
{
	<p>Loading search results...</p>
}
else
{
	<TrailDetails Trail="_selectedTrail"/>
	<div class="grid">
		@foreach (var trail in _searchResults)
		{
			<TrailCard Trail="trail" OnSelected="HandleTrailSelected"/>
		}
	</div>
}

@code
{
	/// <summary>
	///     Для хранения копии неотфильтрованных результатов поиска
	/// </summary>
	private IEnumerable<Trail> _cachedSearchResults = Array.Empty<Trail>();

	private IEnumerable<Trail>? _searchResults;
	private Trail? _selectedTrail;

	[Parameter]
	public string SearchTerm { get; set; } = default!;

	[Parameter, SupplyParameterFromQuery]
	public int? MaxLength { get; set; }

    //SupplyParameterFromQuery - говорит о том, что значение для параметра MaxTime будет браться из URL
	[Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }

	//Метод состояния Blazor. Будет вызван один раз при загрузке компонента, аналог конструктора
	protected override async Task OnInitializedAsync()
	{
		try
		{
			IEnumerable<Trail>? allTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
			_searchResults = allTrails!.Where(x => x.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
				|| x.Location.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));
			_cachedSearchResults = _searchResults;
		}
		catch (HttpRequestException exception)
		{
			Console.WriteLine(exception.Message);
			throw;
		}
	}

    //Метод состояния Blazor. Будет вызван каждый раз при любом изменении параметров Url или значений полей html
	protected override void OnParametersSet()
	{
		UpdateFilters();
	}

	private void HandleTrailSelected(Trail trail)
	{
		_selectedTrail = trail;
	}

	private void UpdateFilters()
	{
		List<Func<Trail, bool>> filters = new List<Func<Trail, bool>>();
		if (MaxLength is not null && MaxLength > 0)
			filters.Add(x => x.Length <= MaxLength);

		if (MaxTime is not null && MaxTime > 0)
			filters.Add(x => x.TimeInMinutes <= MaxTime * 60);

		if (filters.Any())
		{
			_searchResults = _cachedSearchResults.Where(trail => filters.All(filter => filter(trail)));
		}
		else
		{
			_searchResults = _cachedSearchResults;
		}
	}
}
